// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: service_referrals.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Referrals_GetReferrer_FullMethodName   = "/pb.Referrals/GetReferrer"
	Referrals_ListReferrals_FullMethodName = "/pb.Referrals/ListReferrals"
)

// ReferralsClient is the client API for Referrals service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReferralsClient interface {
	GetReferrer(ctx context.Context, in *GetReferrerRequest, opts ...grpc.CallOption) (*GetReferrerResponse, error)
	ListReferrals(ctx context.Context, in *ListReferralsRequest, opts ...grpc.CallOption) (*ListReferralsResponse, error)
}

type referralsClient struct {
	cc grpc.ClientConnInterface
}

func NewReferralsClient(cc grpc.ClientConnInterface) ReferralsClient {
	return &referralsClient{cc}
}

func (c *referralsClient) GetReferrer(ctx context.Context, in *GetReferrerRequest, opts ...grpc.CallOption) (*GetReferrerResponse, error) {
	out := new(GetReferrerResponse)
	err := c.cc.Invoke(ctx, Referrals_GetReferrer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralsClient) ListReferrals(ctx context.Context, in *ListReferralsRequest, opts ...grpc.CallOption) (*ListReferralsResponse, error) {
	out := new(ListReferralsResponse)
	err := c.cc.Invoke(ctx, Referrals_ListReferrals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferralsServer is the server API for Referrals service.
// All implementations must embed UnimplementedReferralsServer
// for forward compatibility
type ReferralsServer interface {
	GetReferrer(context.Context, *GetReferrerRequest) (*GetReferrerResponse, error)
	ListReferrals(context.Context, *ListReferralsRequest) (*ListReferralsResponse, error)
	mustEmbedUnimplementedReferralsServer()
}

// UnimplementedReferralsServer must be embedded to have forward compatible implementations.
type UnimplementedReferralsServer struct {
}

func (UnimplementedReferralsServer) GetReferrer(context.Context, *GetReferrerRequest) (*GetReferrerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferrer not implemented")
}
func (UnimplementedReferralsServer) ListReferrals(context.Context, *ListReferralsRequest) (*ListReferralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferrals not implemented")
}
func (UnimplementedReferralsServer) mustEmbedUnimplementedReferralsServer() {}

// UnsafeReferralsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferralsServer will
// result in compilation errors.
type UnsafeReferralsServer interface {
	mustEmbedUnimplementedReferralsServer()
}

func RegisterReferralsServer(s grpc.ServiceRegistrar, srv ReferralsServer) {
	s.RegisterService(&Referrals_ServiceDesc, srv)
}

func _Referrals_GetReferrer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferrerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralsServer).GetReferrer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Referrals_GetReferrer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralsServer).GetReferrer(ctx, req.(*GetReferrerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrals_ListReferrals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReferralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralsServer).ListReferrals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Referrals_ListReferrals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralsServer).ListReferrals(ctx, req.(*ListReferralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Referrals_ServiceDesc is the grpc.ServiceDesc for Referrals service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Referrals_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Referrals",
	HandlerType: (*ReferralsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReferrer",
			Handler:    _Referrals_GetReferrer_Handler,
		},
		{
			MethodName: "ListReferrals",
			Handler:    _Referrals_ListReferrals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_referrals.proto",
}
