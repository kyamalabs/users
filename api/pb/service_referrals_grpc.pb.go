// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: service_referrals.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Referrals_GetReferer_FullMethodName   = "/pb.Referrals/GetReferer"
	Referrals_GetReferrals_FullMethodName = "/pb.Referrals/GetReferrals"
)

// ReferralsClient is the client API for Referrals service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReferralsClient interface {
	GetReferer(ctx context.Context, in *GetRefererRequest, opts ...grpc.CallOption) (*GetRefererResponse, error)
	GetReferrals(ctx context.Context, in *GetReferralsRequest, opts ...grpc.CallOption) (*GetReferralsResponse, error)
}

type referralsClient struct {
	cc grpc.ClientConnInterface
}

func NewReferralsClient(cc grpc.ClientConnInterface) ReferralsClient {
	return &referralsClient{cc}
}

func (c *referralsClient) GetReferer(ctx context.Context, in *GetRefererRequest, opts ...grpc.CallOption) (*GetRefererResponse, error) {
	out := new(GetRefererResponse)
	err := c.cc.Invoke(ctx, Referrals_GetReferer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralsClient) GetReferrals(ctx context.Context, in *GetReferralsRequest, opts ...grpc.CallOption) (*GetReferralsResponse, error) {
	out := new(GetReferralsResponse)
	err := c.cc.Invoke(ctx, Referrals_GetReferrals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferralsServer is the server API for Referrals service.
// All implementations must embed UnimplementedReferralsServer
// for forward compatibility
type ReferralsServer interface {
	GetReferer(context.Context, *GetRefererRequest) (*GetRefererResponse, error)
	GetReferrals(context.Context, *GetReferralsRequest) (*GetReferralsResponse, error)
	mustEmbedUnimplementedReferralsServer()
}

// UnimplementedReferralsServer must be embedded to have forward compatible implementations.
type UnimplementedReferralsServer struct {
}

func (UnimplementedReferralsServer) GetReferer(context.Context, *GetRefererRequest) (*GetRefererResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferer not implemented")
}
func (UnimplementedReferralsServer) GetReferrals(context.Context, *GetReferralsRequest) (*GetReferralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferrals not implemented")
}
func (UnimplementedReferralsServer) mustEmbedUnimplementedReferralsServer() {}

// UnsafeReferralsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferralsServer will
// result in compilation errors.
type UnsafeReferralsServer interface {
	mustEmbedUnimplementedReferralsServer()
}

func RegisterReferralsServer(s grpc.ServiceRegistrar, srv ReferralsServer) {
	s.RegisterService(&Referrals_ServiceDesc, srv)
}

func _Referrals_GetReferer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefererRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralsServer).GetReferer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Referrals_GetReferer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralsServer).GetReferer(ctx, req.(*GetRefererRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Referrals_GetReferrals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralsServer).GetReferrals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Referrals_GetReferrals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralsServer).GetReferrals(ctx, req.(*GetReferralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Referrals_ServiceDesc is the grpc.ServiceDesc for Referrals service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Referrals_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Referrals",
	HandlerType: (*ReferralsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReferer",
			Handler:    _Referrals_GetReferer_Handler,
		},
		{
			MethodName: "GetReferrals",
			Handler:    _Referrals_GetReferrals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_referrals.proto",
}
