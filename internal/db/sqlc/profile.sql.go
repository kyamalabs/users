// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (
    wallet_address,
    gamer_tag
) VALUES (
    $1, $2
) RETURNING wallet_address, gamer_tag, created_at
`

type CreateProfileParams struct {
	WalletAddress string `json:"wallet_address"`
	GamerTag      string `json:"gamer_tag"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile, arg.WalletAddress, arg.GamerTag)
	var i Profile
	err := row.Scan(&i.WalletAddress, &i.GamerTag, &i.CreatedAt)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles
WHERE wallet_address = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, walletAddress string) error {
	_, err := q.db.Exec(ctx, deleteProfile, walletAddress)
	return err
}

const getProfile = `-- name: GetProfile :one
SELECT wallet_address, gamer_tag, created_at FROM profiles
WHERE wallet_address = $1
LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, walletAddress string) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfile, walletAddress)
	var i Profile
	err := row.Scan(&i.WalletAddress, &i.GamerTag, &i.CreatedAt)
	return i, err
}

const getProfilesCount = `-- name: GetProfilesCount :one
SELECT COUNT(*) as total_profiles FROM profiles
`

func (q *Queries) GetProfilesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getProfilesCount)
	var total_profiles int64
	err := row.Scan(&total_profiles)
	return total_profiles, err
}

const listProfiles = `-- name: ListProfiles :many
SELECT wallet_address, gamer_tag, created_at FROM profiles
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListProfilesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProfiles(ctx context.Context, arg ListProfilesParams) ([]Profile, error) {
	rows, err := q.db.Query(ctx, listProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Profile{}
	for rows.Next() {
		var i Profile
		if err := rows.Scan(&i.WalletAddress, &i.GamerTag, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
SET
    gamer_tag = COALESCE($1, gamer_tag)
WHERE
    wallet_address = $2
RETURNING wallet_address, gamer_tag, created_at
`

type UpdateProfileParams struct {
	GamerTag      pgtype.Text `json:"gamer_tag"`
	WalletAddress string      `json:"wallet_address"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updateProfile, arg.GamerTag, arg.WalletAddress)
	var i Profile
	err := row.Scan(&i.WalletAddress, &i.GamerTag, &i.CreatedAt)
	return i, err
}
