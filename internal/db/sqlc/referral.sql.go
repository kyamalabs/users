// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: referral.sql

package db

import (
	"context"
)

const createReferral = `-- name: CreateReferral :one
INSERT INTO referrals (
    referrer,
    referee
) VALUES (
    $1, $2
) RETURNING id, referrer, referee, referred_at
`

type CreateReferralParams struct {
	Referrer string `json:"referrer"`
	Referee  string `json:"referee"`
}

func (q *Queries) CreateReferral(ctx context.Context, arg CreateReferralParams) (Referral, error) {
	row := q.db.QueryRow(ctx, createReferral, arg.Referrer, arg.Referee)
	var i Referral
	err := row.Scan(
		&i.ID,
		&i.Referrer,
		&i.Referee,
		&i.ReferredAt,
	)
	return i, err
}

const getReferralsCount = `-- name: GetReferralsCount :one
SELECT COUNT(*) as total_referrals
FROM referrals
WHERE referrer = $1
`

func (q *Queries) GetReferralsCount(ctx context.Context, referrer string) (int64, error) {
	row := q.db.QueryRow(ctx, getReferralsCount, referrer)
	var total_referrals int64
	err := row.Scan(&total_referrals)
	return total_referrals, err
}

const getReferrer = `-- name: GetReferrer :one
SELECT id, referrer, referee, referred_at FROM referrals
WHERE referee = $1
LIMIT 1
`

func (q *Queries) GetReferrer(ctx context.Context, referee string) (Referral, error) {
	row := q.db.QueryRow(ctx, getReferrer, referee)
	var i Referral
	err := row.Scan(
		&i.ID,
		&i.Referrer,
		&i.Referee,
		&i.ReferredAt,
	)
	return i, err
}

const listReferrals = `-- name: ListReferrals :many
SELECT id, referrer, referee, referred_at FROM referrals
WHERE referrer = $1
ORDER BY referred_at DESC
LIMIT $2
OFFSET $3
`

type ListReferralsParams struct {
	Referrer string `json:"referrer"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListReferrals(ctx context.Context, arg ListReferralsParams) ([]Referral, error) {
	rows, err := q.db.Query(ctx, listReferrals, arg.Referrer, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Referral{}
	for rows.Next() {
		var i Referral
		if err := rows.Scan(
			&i.ID,
			&i.Referrer,
			&i.Referee,
			&i.ReferredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
